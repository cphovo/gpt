https://bypass.churchless.tech/
ask for answer(press Enter twice to finish): 
https://bypass.churchless.tech/
ask for answer(press Enter twice to finish): 

生成一道编程题，涉及以下内容：
[算法]
DFS、二叉平衡树、回溯
[代码量]
完成题目所需要编写的代码量在 60 行左右
[难度]
困难，题干在理解的逻辑难度上，一定要保证题目描述不能被一眼看出解法及考点，解法需要 15 分钟以上的思考
[语言]
Python，C++
[场景]
金融交易
[核心]
- 不要抄袭 LeetCode 等主流算法刷题平台的内容，生成的题目是原创的，具有挑战的
- 具体详尽的业务场景和需求约束条件


**题目名称**：金融交易系统的实时交易统计

**题目描述**：

假设你正在为一家金融公司开发实时交易统计系统。每笔交易包括一个`交易ID`和`交易金额`。同时，该系统需要维护一个按交易金额进行平衡的二叉树，并允许实时查询。

这里有两个主要任务：

1. 将每一笔新的交易数据插入到二叉平衡树中，并保持树的平衡。
2. 通过深度优先搜索和回溯，实时找出连续N笔交易，其总金额不超过给定阈值的最大连续交易序列的长度。

给定一串交易数据，并在每一笔交易后执行上述两个操作。

**输入描述**：

- 输入第一行包含一个整数 `T`，表示有 `T` 笔交易；
- 接下来 `T` 行，每行包含一个整数 `id` 和一个浮点数 `amount`，表示一笔交易的 `交易ID` 和 `交易金额`；
- 输入接下来一行包含一个整数 `N`，表示要查询的连续交易笔数；
- 输入接下来一行包含一个浮点数 `threshold`，表示总金额的阈值。

**输出描述**：

- 每次查询后，输出一个整数，表示不超过阈值的最大连续交易序列的长度。

**限制条件**：

- `1 <= T <= 10000`
- `1 <= id <= 1000000`
- `0.01 <= amount <= 1000`
- `1 <= N <= T`
- `0.01 <= threshold <= 100000`

**示例**：

```
输入：
5
1 100.5
2 200.2
3 300.8
4 150.1
5 90.2
3
400.5

输出：
2
1
1
2
3
```

**提示**：利用二叉平衡树进行数据的快速插入和查询，同时借助深度优先搜索与回溯，找出连续的交易序列满足题目条件。
ask for answer(press Enter twice to finish): 
